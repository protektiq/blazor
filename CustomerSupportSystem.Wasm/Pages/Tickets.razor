@page "/tickets"
@using CustomerSupportSystem.Domain.Entities
@using CustomerSupportSystem.Wasm.Services
@inject TicketsService TicketsService
@inject NavigationManager Navigation

<PageTitle>Tickets</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>Tickets</h1>
                <button class="btn btn-primary" @onclick="CreateNewTicket">
                    <i class="fas fa-plus"></i> New Ticket
                </button>
            </div>

            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            }
            else if (tickets?.Any() == true)
            {
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Title</th>
                                        <th>Status</th>
                                        <th>Priority</th>
                                        <th>Customer</th>
                                        <th>Assignee</th>
                                        <th>Created</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ticket in tickets)
                                    {
                                        <tr>
                                            <td>@ticket.Id</td>
                                            <td>@ticket.Title</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(ticket.Status)">
                                                    @ticket.Status
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge @GetPriorityBadgeClass(ticket.Priority)">
                                                    @ticket.Priority
                                                </span>
                                            </td>
                                            <td>@(ticket.Customer?.FullName ?? "N/A")</td>
                                            <td>@(ticket.Assignee?.FullName ?? "Unassigned")</td>
                                            <td>@ticket.CreatedAt.ToString("MMM dd, yyyy")</td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary" @onclick="() => ViewTicket(ticket.Id)">
                                                    <i class="fas fa-eye"></i> View
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="alert alert-info" role="alert">
                    <h4 class="alert-heading">No Tickets Found</h4>
                    <p>There are no tickets to display at the moment.</p>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<Ticket>? tickets;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTickets();
    }

    private async Task LoadTickets()
    {
        isLoading = true;
        tickets = await TicketsService.GetTicketsAsync();
        isLoading = false;
    }

    private void ViewTicket(int ticketId)
    {
        Navigation.NavigateTo($"/tickets/{ticketId}");
    }

    private void CreateNewTicket()
    {
        // For now, just show a message
        // In a real app, you'd navigate to a create ticket page
    }

    private string GetStatusBadgeClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Open => "bg-success",
            TicketStatus.InProgress => "bg-warning",
            TicketStatus.Resolved => "bg-info",
            TicketStatus.Closed => "bg-secondary",
            TicketStatus.Reopened => "bg-danger",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityBadgeClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Low => "bg-success",
            TicketPriority.Medium => "bg-warning",
            TicketPriority.High => "bg-danger",
            TicketPriority.Critical => "bg-dark",
            _ => "bg-secondary"
        };
    }
}