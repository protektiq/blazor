@page "/reports"
@using CustomerSupportSystem.Domain.Entities
@using CustomerSupportSystem.Data.Context
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext DbContext
@rendermode InteractiveServer

<PageTitle>Reports</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1>Reports</h1>
            <p>View system reports and analytics.</p>
        </div>
    </div>

    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Ticket Statistics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <h6>Total Tickets</h6>
                            <h4 class="text-primary">@totalTickets</h4>
                        </div>
                        <div class="col-6">
                            <h6>Open Tickets</h6>
                            <h4 class="text-success">@openTickets</h4>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-6">
                            <h6>In Progress</h6>
                            <h4 class="text-warning">@inProgressTickets</h4>
                        </div>
                        <div class="col-6">
                            <h6>Resolved</h6>
                            <h4 class="text-info">@resolvedTickets</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Priority Distribution</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-6">
                            <h6>High Priority</h6>
                            <h4 class="text-danger">@highPriorityTickets</h4>
                        </div>
                        <div class="col-6">
                            <h6>Medium Priority</h6>
                            <h4 class="text-warning">@mediumPriorityTickets</h4>
                        </div>
                    </div>
                    <div class="row mt-3">
                        <div class="col-6">
                            <h6>Low Priority</h6>
                            <h4 class="text-success">@lowPriorityTickets</h4>
                        </div>
                        <div class="col-6">
                            <h6>Critical</h6>
                            <h4 class="text-dark">@criticalTickets</h4>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Recent Activity</h5>
                </div>
                <div class="card-body">
                    @if (recentTickets?.Any() == true)
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Ticket ID</th>
                                        <th>Title</th>
                                        <th>Status</th>
                                        <th>Priority</th>
                                        <th>Customer</th>
                                        <th>Created</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var ticket in recentTickets)
                                    {
                                        <tr>
                                            <td>@ticket.Id</td>
                                            <td>@ticket.Title</td>
                                            <td>
                                                <span class="badge @GetStatusBadgeClass(ticket.Status)">
                                                    @ticket.Status
                                                </span>
                                            </td>
                                            <td>
                                                <span class="badge @GetPriorityBadgeClass(ticket.Priority)">
                                                    @ticket.Priority
                                                </span>
                                            </td>
                                            <td>@ticket.Customer?.FullName</td>
                                            <td>@ticket.CreatedAt.ToString("MMM dd, yyyy")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">No recent activity found.</p>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private int totalTickets;
    private int openTickets;
    private int inProgressTickets;
    private int resolvedTickets;
    private int highPriorityTickets;
    private int mediumPriorityTickets;
    private int lowPriorityTickets;
    private int criticalTickets;
    private List<Ticket>? recentTickets;

    protected override async Task OnInitializedAsync()
    {
        await LoadReportData();
    }

    private async Task LoadReportData()
    {
        // Load ticket counts
        totalTickets = await DbContext.Tickets.CountAsync();
        openTickets = await DbContext.Tickets.CountAsync(t => t.Status == TicketStatus.Open);
        inProgressTickets = await DbContext.Tickets.CountAsync(t => t.Status == TicketStatus.InProgress);
        resolvedTickets = await DbContext.Tickets.CountAsync(t => t.Status == TicketStatus.Resolved);

        // Load priority counts
        highPriorityTickets = await DbContext.Tickets.CountAsync(t => t.Priority == TicketPriority.High);
        mediumPriorityTickets = await DbContext.Tickets.CountAsync(t => t.Priority == TicketPriority.Medium);
        lowPriorityTickets = await DbContext.Tickets.CountAsync(t => t.Priority == TicketPriority.Low);
        criticalTickets = await DbContext.Tickets.CountAsync(t => t.Priority == TicketPriority.Critical);

        // Load recent tickets
        recentTickets = await DbContext.Tickets
            .Include(t => t.Customer)
            .OrderByDescending(t => t.CreatedAt)
            .Take(10)
            .ToListAsync();
    }

    private string GetStatusBadgeClass(TicketStatus status)
    {
        return status switch
        {
            TicketStatus.Open => "bg-success",
            TicketStatus.InProgress => "bg-warning",
            TicketStatus.Resolved => "bg-info",
            TicketStatus.Closed => "bg-secondary",
            _ => "bg-secondary"
        };
    }

    private string GetPriorityBadgeClass(TicketPriority priority)
    {
        return priority switch
        {
            TicketPriority.Low => "bg-success",
            TicketPriority.Medium => "bg-warning",
            TicketPriority.High => "bg-danger",
            TicketPriority.Critical => "bg-dark",
            _ => "bg-secondary"
        };
    }
}
