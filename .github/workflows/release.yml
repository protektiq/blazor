name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Mark as pre-release'
        type: boolean
        default: false

env:
  DOTNET_VERSION: '8.0.x'
  SOLUTION_FILE: 'CustomerSupportSystem.sln'

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get version from tag
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Customer Support System ${{ steps.version.outputs.version }}
        body: |
          ## Customer Support System ${{ steps.version.outputs.version }}
          
          ### What's New
          - Bug fixes and improvements
          - Updated dependencies
          - Enhanced user experience
          
          ### Installation
          Download the latest release artifacts and follow the deployment guide.
          
          ### Changes
          See the [changelog](CHANGELOG.md) for detailed information about changes in this release.
        draft: false
        prerelease: ${{ github.event.inputs.prerelease || false }}

  build-release:
    runs-on: ubuntu-latest
    needs: create-release
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Cache .NET packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Build solution
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          dotnet build ${{ env.SOLUTION_FILE }} -c Release
        else
          make build
        fi
        
    - name: Publish applications
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          dotnet publish CustomerSupportSystem.Wasm/CustomerSupportSystem.Wasm.csproj -c Release -o ./dist-wasm
          dotnet publish CustomerSupportSystem.Api/CustomerSupportSystem.Api.csproj -c Release -o ./dist-api
        else
          make publish
        fi
        
    - name: Create release archive
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          # Windows
          Compress-Archive -Path "dist-wasm/*" -DestinationPath "customer-support-system-wasm-${{ runner.os }}.zip"
          Compress-Archive -Path "dist-api/*" -DestinationPath "customer-support-system-api-${{ runner.os }}.zip"
        else
          # Linux/macOS
          tar -czf customer-support-system-wasm-${{ runner.os }}.tar.gz -C dist .
          tar -czf customer-support-system-api-${{ runner.os }}.tar.gz -C dist-api .
        fi
        
    - name: Upload WASM release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./customer-support-system-wasm-${{ runner.os }}.tar.gz
        asset_name: customer-support-system-wasm-${{ runner.os }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload API release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./customer-support-system-api-${{ runner.os }}.tar.gz
        asset_name: customer-support-system-api-${{ runner.os }}.tar.gz
        asset_content_type: application/gzip

  deploy-production:
    runs-on: ubuntu-latest
    needs: [create-release, build-release]
    if: github.ref_type == 'tag' && !startsWith(github.ref, 'v0.') # Only deploy stable releases
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production..."
        # Add your production deployment steps here
        # This could include:
        # - Deploying to Azure App Service
        # - Deploying to AWS
        # - Updating Docker containers
        # - etc.
        
    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
